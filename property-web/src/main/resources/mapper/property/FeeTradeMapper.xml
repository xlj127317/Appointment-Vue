<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.property.mapper.FeeTradeMapper">
    <resultMap id="BaseResultMap" type="com.ruoyi.property.domain.FeeTrade">
        <!--@mbg.generated-->
        <!--@Table visit-->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="no" jdbcType="VARCHAR" property="no"/>
        <result column="subject" jdbcType="VARCHAR" property="subject"/>
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="price" jdbcType="DECIMAL" property="price"/>
        <result column="count" jdbcType="DECIMAL" property="count"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="state" property="state" typeHandler="com.ruoyi.common.enums.FeeTradeStatusTypeHandler" />
        <result column="paid_at" jdbcType="TIMESTAMP" property="paidAt" />
        <result column="paid_amount" jdbcType="DECIMAL" property="paidAmount" />
        <result column="refunded_at" jdbcType="TIMESTAMP" property="refundedAt" />
        <result column="refunded_amount" jdbcType="DECIMAL" property="refundedAmount" />
        <result column="biz_channel" jdbcType="VARCHAR" property="bizChannel"/>
        <result column="biz_trade_no" jdbcType="VARCHAR" property="bizTradeNo"/>
        <result column="out_scope" jdbcType="VARCHAR" property="outScope"/>
        <result column="out_id" jdbcType="VARCHAR" property="outId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        owner_id,
        balance,
        frozen,
        checked_at
    </sql>
    <insert id="create" parameterType="java.util.Map">
        INSERT INTO fee_trades
        (
            id,
            owner_id,
            no,
            subject,
            description,
            price,
            count,
            amount,
            state,
            out_scope,
            out_id,
            contract_id,
            create_time
        ) VALUES (
            #{id},
            #{ownerId},
            #{no},
            #{subject},
            #{description},
            #{price},
            #{count},
            #{amount},
            #{state},
            #{outScope},
            #{outId},
            #{contractId},
            CURRENT_TIMESTAMP
        );
    </insert>
    <select id="listUserTrades" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT * FROM fee_trades WHERE owner_id = #{ownerId} ORDER BY create_time DESC;
    </select>
    <select id="listTrades" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
            fee_trades.*,
            sys_user.nick_name AS creator_nickname
        FROM fee_trades
        LEFT JOIN sys_user ON sys_user.user_id = fee_trades.owner_id
        WHERE 1 = 1
        <if test="multiIdValues != null">
            <foreach item="id" collection="multiIdValues" open="AND id IN (" separator="," close=")" nullable="false">
                #{id}
            </foreach>
        </if>
        <if test="ownerId != null">
            AND owner_id = #{ownerId}
        </if>
        <if test="multiStateValues != null">
            <foreach item="stateValue" collection="multiStateValues" open="AND state IN (" separator="," close=")" nullable="false">
                #{stateValue}
            </foreach>
        </if>
        <if test="contractId != null">

        </if>
        <if test="outScope != null">
            AND out_scope = #{outScope}
        </if>
        <if test="outId != null">
            AND out_id = #{outId}
        </if>
        <if test="paidAtBegin != null">
            AND paid_at >= #{paidAtBegin}
        </if>
        <if test="paidAtEnd != null">
            <![CDATA[AND paid_at <= #{paidAtEnd}]]>
        </if>
        <if test="createTimeBegin != null">
            AND create_time >= #{createTimeBegin}
        </if>
        <if test="createTimeEnd != null">
            <![CDATA[AND create_time <= #{createTimeEnd}]]>
        </if>
    </select>
    <select id="getTradeByNo" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT * FROM fee_trades WHERE no = #{no} LIMIT 1;
    </select>
    <select id="getTrade" resultType="java.util.Map">
        SELECT * FROM fee_trades WHERE 1= 1
        <if test="id != null">
            AND id = #{id}
        </if>
        <if test="no != null">
            AND no = #{no}
        </if>
        <if test="ownerId != null">
            AND owner_id = #{ownerId}
        </if>
        <if test="outScope != null">
            AND out_scope = #{outScope}
        </if>
        <if test="outId != null">
            AND out_id = #{outId}
        </if>
        LIMIT 1
        <choose>
            <when test="lockMode == @com.ruoyi.common.enums.SqlLockMode@SHARE">
                LOCK IN SHARE MODE
            </when>
            <when test="lockMode == @com.ruoyi.common.enums.SqlLockMode@UPDATE">
                FOR UPDATE
            </when>
        </choose>
    </select>
    <update id="completeTrade">
        UPDATE fee_trades SET
            paid_at = CURRENT_TIMESTAMP,
            paid_amount = #{paidAmount},
            biz_channel = #{bizChannel},
            biz_trade_no = #{bizTradeNo},
            state = #{stateSucceedValue}
        WHERE
        <choose>
            <when test="no != null">
                no = #{no}
            </when>
            <otherwise>
                id = #{id}
            </otherwise>
        </choose>
        AND state = 0
    </update>
    <delete id="deleteTrade" parameterType="java.lang.String">
        DELETE FROM fee_trades WHERE id = #{id}
    </delete>
    <select id="statisticSummaryByMonth" resultType="java.util.Map">
        SELECT
            SUM(paid_amount) AS paidAmount,
            MONTH (paid_at) AS month
        FROM
            fee_trades
        WHERE
            state = 2
            AND YEAR(paid_at) = #{year}
    GROUP BY MONTH (paid_at)
    </select>
    <select id="statisticSummaryByQuarter" resultType="java.util.Map">
        SELECT
            SUM(paid_amount) AS paidAmount,
            quarter(paid_at) AS `quarter`
        FROM
            fee_trades
        WHERE
            state = 2
            AND YEAR(paid_at) = #{year}
        GROUP BY `quarter`
    </select>
</mapper>